{"version":3,"file":"react-split-grid.min.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport Split from 'split-grid'\n\nclass ReactSplitGrid extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.columnGutters = {}\n        this.rowGutters = {}\n\n        this.state = {\n            gridTemplateColumns: props.gridTemplateColumns\n                ? props.gridTemplateColumns\n                : null,\n            gridTemplateRows: props.gridTemplateRows\n                ? props.gridTemplateRows\n                : null,\n        }\n\n        this.getGridProps = this.getGridProps.bind(this)\n        this.getGutterProps = this.getGutterProps.bind(this)\n        this.handleDragStart = this.handleDragStart.bind(this)\n        this.writeStyle = this.writeStyle.bind(this)\n        this.onDrag = this.onDrag.bind(this)\n    }\n\n    componentDidMount() {\n        const { children, ...options } = this.props\n\n        options.writeStyle = this.writeStyle\n        options.onDrag = this.onDrag\n\n        this.split = Split(options)\n    }\n\n    componentDidUpdate(prevProps) {\n        const {\n            columnMinSizes,\n            rowMinSizes,\n            columnMaxSizes,\n            rowMaxSizes,\n            children,\n            ...options\n        } = this.props\n\n        const {\n            columnMinSizes: prevColumnMinSizes,\n            rowMinSizes: prevRowMinSizes,\n            columnMaxSizes: prevColumnMaxSizes,\n            rowMaxSizes: prevRowMaxSizes,\n        } = prevProps\n\n        const otherProps = [\n            'minSize',\n            'maxSize',\n            'columnMinSize',\n            'rowMinSize',\n            'columnMaxSize',\n            'rowMaxSize',\n            'columnMinSizes',\n            'rowMinSizes',\n            'columnMaxSizes',\n            'rowMaxSizes',\n            'snapOffset',\n            'columnSnapOffset',\n            'rowSnapOffset',\n            'dragInterval',\n            'columnDragInterval',\n            'rowDragInterval',\n            'cursor',\n            'columnCursor',\n            'rowCursor',\n        ]\n\n        let needsRecreate = otherProps\n            // eslint-disable-next-line react/destructuring-assignment\n            .map(prop => this.props[prop] !== prevProps[prop])\n            .reduce((accum, same) => accum || same, false)\n\n        // TODO use deep equals\n        if (columnMinSizes !== prevColumnMinSizes) {\n            needsRecreate = true\n        }\n\n        if (rowMinSizes !== prevRowMinSizes) {\n            needsRecreate = true\n        }\n\n        if (rowMaxSizes !== prevRowMaxSizes) {\n            needsRecreate = true\n        }\n\n        // Destroy and re-create split if options changed\n        if (needsRecreate) {\n            options.columnMinSizes = columnMinSizes\n            options.rowMinSizes = rowMinSizes\n\n            this.split.destroy(false)\n\n            this.split = Split(options)\n        }\n    }\n\n    componentWillUnmount() {\n        this.split.destroy()\n        delete this.split\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const state = {}\n        let needsSetState = false\n\n        if (\n            nextProps.gridTemplateColumns &&\n            nextProps.gridTemplateColumns !== prevState.gridTemplateColumns\n        ) {\n            state.gridTemplateColumns = nextProps.gridTemplateColumns\n            needsSetState = true\n        }\n\n        if (\n            nextProps.gridTemplateRows &&\n            nextProps.gridTemplateRows !== prevState.prevGridTemplateRows\n        ) {\n            state.gridTemplateRows = nextProps.gridTemplateRows\n            needsSetState = true\n        }\n\n        if (needsSetState) {\n            return state\n        }\n\n        return null\n    }\n\n    onDrag(direction, track, style) {\n        const { onDrag } = this.props\n\n        if (onDrag) {\n            onDrag(direction, track, style)\n        }\n    }\n\n    getGridProps() {\n        const { gridTemplateColumns, gridTemplateRows } = this.state\n        const style = {}\n\n        if (gridTemplateColumns) {\n            style.gridTemplateColumns = gridTemplateColumns\n        }\n\n        if (gridTemplateRows) {\n            style.gridTemplateRows = gridTemplateRows\n        }\n\n        return {\n            style,\n        }\n    }\n\n    getGutterProps(direction, track) {\n        return {\n            onMouseDown: this.handleDragStart(direction, track),\n            onTouchStart: this.handleDragStart(direction, track),\n        }\n    }\n\n    handleDragStart(direction, track) {\n        return e => {\n            this.split.handleDragStart(e, direction, track)\n        }\n    }\n\n    writeStyle(element, gridTemplateProp, style) {\n        const state = {}\n\n        if (gridTemplateProp === 'grid-template-columns') {\n            state.gridTemplateColumns = style\n        } else if (gridTemplateProp === 'grid-template-rows') {\n            state.gridTemplateRows = style\n        }\n\n        this.setState(state)\n    }\n\n    render() {\n        const { component, render, children } = this.props\n        const props = {\n            getGridProps: this.getGridProps,\n            getGutterProps: this.getGutterProps,\n        }\n\n        /* eslint-disable no-nested-ternary */\n        return component\n            ? React.createElement(component, props)\n            : render\n            ? render(props)\n            : children\n            ? typeof children === 'function'\n                ? children(props)\n                : !(React.Children.count(children) === 0)\n                ? React.Children.only(children)\n                : null\n            : null\n    }\n}\n\nReactSplitGrid.propTypes = {\n    component: PropTypes.element,\n    render: PropTypes.func,\n    children: PropTypes.element,\n    gridTemplateColumns: PropTypes.string,\n    gridTemplateRows: PropTypes.string,\n    columnMinSizes: PropTypes.objectOf(PropTypes.number),\n    rowMinSizes: PropTypes.objectOf(PropTypes.number),\n    columnMaxSizes: PropTypes.objectOf(PropTypes.number),\n    rowMaxSizes: PropTypes.objectOf(PropTypes.number),\n    onDrag: PropTypes.func,\n}\n\nReactSplitGrid.defaultProps = {\n    component: undefined,\n    render: undefined,\n    children: undefined,\n    gridTemplateColumns: undefined,\n    gridTemplateRows: undefined,\n    columnMinSizes: undefined,\n    rowMinSizes: undefined,\n    columnMaxSizes: undefined,\n    rowMaxSizes: undefined,\n    onDrag: undefined,\n}\n\nexport default ReactSplitGrid\n"],"names":["ReactSplitGrid","props","super","this","columnGutters","rowGutters","state","gridTemplateColumns","gridTemplateRows","getGridProps","bind","getGutterProps","handleDragStart","writeStyle","onDrag","componentDidMount","options","split","Split","componentDidUpdate","prevProps","needsRecreate","map","prop","reduce","accum","same","columnMinSizes","prevColumnMinSizes","rowMinSizes","prevRowMinSizes","rowMaxSizes","prevRowMaxSizes","destroy","componentWillUnmount","getDerivedStateFromProps","nextProps","prevState","const","needsSetState","prevGridTemplateRows","direction","track","style","onMouseDown","onTouchStart","e","element","gridTemplateProp","setState","render","component","React","createElement","children","Children","count","only","Component","propTypes","PropTypes","func","string","objectOf","number","columnMaxSizes","defaultProps","undefined"],"mappings":";+kBAIMA,cACF,WAAYC,GACRC,YAAMD,GAENE,KAAKC,cAAgB,GACrBD,KAAKE,WAAa,GAElBF,KAAKG,MAAQ,CACTC,oBAAqBN,EAAMM,oBACrBN,EAAMM,oBACN,KACNC,iBAAkBP,EAAMO,iBAClBP,EAAMO,iBACN,MAGVL,KAAKM,aAAeN,KAAKM,aAAaC,KAAKP,MAC3CA,KAAKQ,eAAiBR,KAAKQ,eAAeD,KAAKP,MAC/CA,KAAKS,gBAAkBT,KAAKS,gBAAgBF,KAAKP,MACjDA,KAAKU,WAAaV,KAAKU,WAAWH,KAAKP,MACvCA,KAAKW,OAASX,KAAKW,OAAOJ,KAAKP,gHAGnCY,mCACqCZ,KAAKF,iBAApB,wBAElBe,EAAQH,WAAaV,KAAKU,WAC1BG,EAAQF,OAASX,KAAKW,OAEtBX,KAAKc,MAAQC,UAAMF,gBAGvBG,4BAAmBC,gBAQXjB,KAAKF,0DAHL,+BAEA,0IAOa,oBAyBboB,EAtBe,CACf,UACA,UACA,gBACA,aACA,gBACA,aACA,iBACA,cACA,iBACA,cACA,aACA,mBACA,gBACA,eACA,qBACA,kBACA,SACA,eACA,aAKCC,cAAIC,UAAQpB,EAAKF,MAAMsB,KAAUH,EAAUG,MAC3CC,iBAAQC,EAAOC,UAASD,GAASC,KAAM,GAGxCC,IAAmBC,IACnBP,GAAgB,GAGhBQ,IAAgBC,IAChBT,GAAgB,GAGhBU,IAAgBC,IAChBX,GAAgB,GAIhBA,IACAL,EAAQW,eAAiBA,EACzBX,EAAQa,YAAcA,EAEtB1B,KAAKc,MAAMgB,SAAQ,GAEnB9B,KAAKc,MAAQC,UAAMF,iBAI3BkB,gCACI/B,KAAKc,MAAMgB,iBACJ9B,KAAKc,OAGhBjB,EAAOmC,kCAAyBC,EAAWC,GACvCC,IAAMhC,EAAQ,GACViC,GAAgB,EAkBpB,OAfIH,EAAU7B,qBACV6B,EAAU7B,sBAAwB8B,EAAU9B,sBAE5CD,EAAMC,oBAAsB6B,EAAU7B,oBACtCgC,GAAgB,GAIhBH,EAAU5B,kBACV4B,EAAU5B,mBAAqB6B,EAAUG,uBAEzClC,EAAME,iBAAmB4B,EAAU5B,iBACnC+B,GAAgB,GAGhBA,EACOjC,EAGJ,kBAGXQ,gBAAO2B,EAAWC,EAAOC,SACFxC,KAAKF,aAEpBa,GACAA,EAAO2B,EAAWC,EAAOC,gBAIjClC,8BACsDN,KAAKG,mDACjDqC,EAAQ,GAUd,OARIpC,IACAoC,EAAMpC,oBAAsBA,GAG5BC,IACAmC,EAAMnC,iBAAmBA,GAGtB,OACHmC,gBAIRhC,wBAAe8B,EAAWC,GACtB,MAAO,CACHE,YAAazC,KAAKS,gBAAgB6B,EAAWC,GAC7CG,aAAc1C,KAAKS,gBAAgB6B,EAAWC,iBAItD9B,yBAAgB6B,EAAWC,cACvB,gBAAOI,GACH3C,EAAKc,MAAML,gBAAgBkC,EAAGL,EAAWC,iBAIjD7B,oBAAWkC,EAASC,EAAkBL,GAClCL,IAAMhC,EAAQ,GAEW,0BAArB0C,EACA1C,EAAMC,oBAAsBoC,EACA,uBAArBK,IACP1C,EAAME,iBAAmBmC,GAG7BxC,KAAK8C,SAAS3C,gBAGlB4C,wBAC4C/C,KAAKF,4CACvCA,EAAQ,CACVQ,aAAcN,KAAKM,aACnBE,eAAgBR,KAAKQ,gBAIzB,OAAOwC,EACDC,UAAMC,cAAcF,EAAWlD,GAC/BiD,EACAA,EAAOjD,GACPqD,EACoB,mBAAbA,EACHA,EAASrD,GAC4B,IAAnCmD,UAAMG,SAASC,MAAMF,GACvBF,UAAMG,SAASE,KAAKH,GACpB,KACJ,SAxMeF,UAAMM,kBA4MnC1D,EAAe2D,UAAY,CACvBR,UAAWS,UAAUb,QACrBG,OAAQU,UAAUC,KAClBP,SAAUM,UAAUb,QACpBxC,oBAAqBqD,UAAUE,OAC/BtD,iBAAkBoD,UAAUE,OAC5BnC,eAAgBiC,UAAUG,SAASH,UAAUI,QAC7CnC,YAAa+B,UAAUG,SAASH,UAAUI,QAC1CC,eAAgBL,UAAUG,SAASH,UAAUI,QAC7CjC,YAAa6B,UAAUG,SAASH,UAAUI,QAC1ClD,OAAQ8C,UAAUC,MAGtB7D,EAAekE,aAAe,CAC1Bf,eAAWgB,EACXjB,YAAQiB,EACRb,cAAUa,EACV5D,yBAAqB4D,EACrB3D,sBAAkB2D,EAClBxC,oBAAgBwC,EAChBtC,iBAAasC,EACbF,oBAAgBE,EAChBpC,iBAAaoC,EACbrD,YAAQqD"}